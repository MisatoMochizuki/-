from bokeh.layouts import column
from bokeh.models import CustomJS,ColumnDataSource,Slider
from bokeh.plotting import Figure,output_file,show
import math

output_file("slider.html")

t=[t*0.001 for t in range(0,1000)]
v=t

source=ColumnDataSource(data=dict(t=t,v=v))
plot=Figure(plot_width=600,plot_height=400,x_range=[0,1],y_range=[-100,100],title="RCハイパスフィルタ",x_axis_label="時間ｔ",y_axis_label="電圧ｖ")
plot.line(x='t',y='v',source=source,line_width=3,line_alpha=0.9,line_color="pink")
#plt.xlabel("時間ｔ")
#plt.ylabel("電圧ｖ")
#x_axis_label="時間ｔ",y_axis_label="電圧ｖ"
freq=Slider(start=1,end=100,value=50,step=1,title="freqency")
amp=Slider(start=1,end=100,value=50,step=1,title="amplitude")
R=Slider(start=1,end=1000000000,value=50000000,step=1,title="R")
#(1/1+(2*3.14*f*R*C)^2)*sin(2*3.14*f-atan(2*f*R*C))
callback=CustomJS(args=dict(source=source,freq=freq,amp=amp,R=R),code="""

    var data = source.data;
    var f = freq.value
    var a = amp.value
    var R = R.value
    t = data['t']
    v = data['v']
    for(i=0;i<t.length;i++){
    v[i]=(1/(Math.sqrt(1+(1/(4*((Math.PI)**2)*(f**2)*((10**(-10))**2)*((R)**2))))))*a*Math.sin((2*(Math.PI*f*t[i]))-Math.atan(1/(2*Math.PI*f*(10**(-10))*R)))
    }

    source.change.emit();
    """)




layout=column(plot,freq,amp,R)

freq.js_on_change('value',callback)
amp.js_on_change('value',callback)
R.js_on_change('value',callback)


show(layout)

#変数f,a,R
#HPF